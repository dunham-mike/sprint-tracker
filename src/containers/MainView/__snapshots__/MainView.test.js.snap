// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MainView Component should match the snapshot 1`] = `
<MainView
  classes={Object {}}
  isDemo={true}
  onInitiateDemo={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  onOrderSprintsByStartDate={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  queue={
    Array [
      Object {
        "category": Object {
          "value": "Grades & Transcripts",
        },
        "categoryLead": Object {
          "value": "Bobby",
        },
        "completionStatus": Object {
          "value": "",
        },
        "deliverableLink": Object {
          "value": "",
        },
        "deliverables": Object {
          "value": "Historical Illuminate courses matched with current equivalencies.",
        },
        "description": Object {
          "value": "-Audit all historical expeditions grades & match courses to equivalents",
        },
        "estimatedProjectSize": Object {
          "value": "3 - Small-to-Medium",
        },
        "externalDueDate": Object {
          "value": "",
        },
        "id": Object {
          "value": 1,
        },
        "manager": Object {
          "value": "Bobby",
        },
        "mustDo": Object {
          "value": "Nice-to-Have",
        },
        "name": Object {
          "value": "Verify course equivalencies & Grad Requirements in Illuminate",
        },
        "notCompletedExplanation": Object {
          "value": "",
        },
        "notes": Object {
          "value": "",
        },
        "statusEndOfWeek1": Object {
          "value": "25%",
        },
        "statusEndOfWeek2": Object {
          "value": "",
        },
        "statusEndOfWeek3": Object {
          "value": "",
        },
        "statusEndOfWeek4": Object {
          "value": "",
        },
        "statusEndOfWeek5": Object {
          "value": "",
        },
        "statusEndOfWeek6": Object {
          "value": "",
        },
        "statusEndOfWeek7": Object {
          "value": "",
        },
        "statusEndOfWeek8": Object {
          "value": "",
        },
      },
      Object {
        "category": Object {
          "value": "Grades & Transcripts",
        },
        "categoryLead": Object {
          "value": "Bobby",
        },
        "completionStatus": Object {
          "value": "",
        },
        "deliverableLink": Object {
          "value": "",
        },
        "deliverables": Object {
          "value": "Historical Illuminate courses matched with current equivalencies.",
        },
        "description": Object {
          "value": "-Audit all historical expeditions grades & match courses to equivalents",
        },
        "estimatedProjectSize": Object {
          "value": "3 - Small-to-Medium",
        },
        "externalDueDate": Object {
          "value": "",
        },
        "id": Object {
          "value": 2,
        },
        "manager": Object {
          "value": "Mike",
        },
        "mustDo": Object {
          "value": "Nice-to-Have",
        },
        "name": Object {
          "value": "Verify course equivalencies & Grad Requirements in Illuminate",
        },
        "notCompletedExplanation": Object {
          "value": "",
        },
        "notes": Object {
          "value": "",
        },
        "statusEndOfWeek1": Object {
          "value": "",
        },
        "statusEndOfWeek2": Object {
          "value": "",
        },
        "statusEndOfWeek3": Object {
          "value": "",
        },
        "statusEndOfWeek4": Object {
          "value": "",
        },
        "statusEndOfWeek5": Object {
          "value": "",
        },
        "statusEndOfWeek6": Object {
          "value": "",
        },
        "statusEndOfWeek7": Object {
          "value": "",
        },
        "statusEndOfWeek8": Object {
          "value": "",
        },
      },
      Object {
        "category": Object {
          "value": "Grades & Transcripts",
        },
        "categoryLead": Object {
          "value": "Bobby",
        },
        "completionStatus": Object {
          "value": "",
        },
        "deliverableLink": Object {
          "value": "",
        },
        "deliverables": Object {
          "value": "Historical Illuminate courses matched with current equivalencies.",
        },
        "description": Object {
          "value": "-Audit all historical expeditions grades & match courses to equivalents",
        },
        "estimatedProjectSize": Object {
          "value": "1 - Extra Small",
        },
        "externalDueDate": Object {
          "value": "",
        },
        "id": Object {
          "value": 3,
        },
        "manager": Object {
          "value": "Bobby",
        },
        "mustDo": Object {
          "value": "Nice-to-Have",
        },
        "name": Object {
          "value": "Verify course equivalencies & Grad Requirements in Illuminate",
        },
        "notCompletedExplanation": Object {
          "value": "",
        },
        "notes": Object {
          "value": "",
        },
        "statusEndOfWeek1": Object {
          "value": "",
        },
        "statusEndOfWeek2": Object {
          "value": "",
        },
        "statusEndOfWeek3": Object {
          "value": "",
        },
        "statusEndOfWeek4": Object {
          "value": "",
        },
        "statusEndOfWeek5": Object {
          "value": "",
        },
        "statusEndOfWeek6": Object {
          "value": "",
        },
        "statusEndOfWeek7": Object {
          "value": "",
        },
        "statusEndOfWeek8": Object {
          "value": "",
        },
      },
    ]
  }
  sprints={
    Array [
      Object {
        "endDate": "2120-02-06T00:00:00.000Z",
        "id": "test_sprintId",
        "name": "Sprint #1",
        "owner": "Mike",
        "participants": "Mike, Bobby",
        "projects": Array [
          Object {
            "category": Object {
              "value": "Grades & Transcripts",
            },
            "categoryLead": Object {
              "value": "Bobby",
            },
            "completionStatus": Object {
              "value": "",
            },
            "deliverableLink": Object {
              "value": "",
            },
            "deliverables": Object {
              "value": "Historical Illuminate courses matched with current equivalencies.",
            },
            "description": Object {
              "value": "-Audit all historical expeditions grades & match courses to equivalents",
            },
            "estimatedProjectSize": Object {
              "value": "3 - Small-to-Medium",
            },
            "externalDueDate": Object {
              "value": "",
            },
            "id": Object {
              "value": 1,
            },
            "manager": Object {
              "value": "Bobby",
            },
            "mustDo": Object {
              "value": "Nice-to-Have",
            },
            "name": Object {
              "value": "Verify course equivalencies & Grad Requirements in Illuminate",
            },
            "notCompletedExplanation": Object {
              "value": "",
            },
            "notes": Object {
              "value": "",
            },
            "statusEndOfWeek1": Object {
              "value": "25%",
            },
            "statusEndOfWeek2": Object {
              "value": "",
            },
            "statusEndOfWeek3": Object {
              "value": "",
            },
            "statusEndOfWeek4": Object {
              "value": "",
            },
            "statusEndOfWeek5": Object {
              "value": "",
            },
            "statusEndOfWeek6": Object {
              "value": "",
            },
            "statusEndOfWeek7": Object {
              "value": "",
            },
            "statusEndOfWeek8": Object {
              "value": "",
            },
          },
          Object {
            "category": Object {
              "value": "Grades & Transcripts",
            },
            "categoryLead": Object {
              "value": "Bobby",
            },
            "completionStatus": Object {
              "value": "",
            },
            "deliverableLink": Object {
              "value": "",
            },
            "deliverables": Object {
              "value": "Historical Illuminate courses matched with current equivalencies.",
            },
            "description": Object {
              "value": "-Audit all historical expeditions grades & match courses to equivalents",
            },
            "estimatedProjectSize": Object {
              "value": "3 - Small-to-Medium",
            },
            "externalDueDate": Object {
              "value": "",
            },
            "id": Object {
              "value": 2,
            },
            "manager": Object {
              "value": "Mike",
            },
            "mustDo": Object {
              "value": "Nice-to-Have",
            },
            "name": Object {
              "value": "Verify course equivalencies & Grad Requirements in Illuminate",
            },
            "notCompletedExplanation": Object {
              "value": "",
            },
            "notes": Object {
              "value": "",
            },
            "statusEndOfWeek1": Object {
              "value": "",
            },
            "statusEndOfWeek2": Object {
              "value": "",
            },
            "statusEndOfWeek3": Object {
              "value": "",
            },
            "statusEndOfWeek4": Object {
              "value": "",
            },
            "statusEndOfWeek5": Object {
              "value": "",
            },
            "statusEndOfWeek6": Object {
              "value": "",
            },
            "statusEndOfWeek7": Object {
              "value": "",
            },
            "statusEndOfWeek8": Object {
              "value": "",
            },
          },
          Object {
            "category": Object {
              "value": "Grades & Transcripts",
            },
            "categoryLead": Object {
              "value": "Bobby",
            },
            "completionStatus": Object {
              "value": "",
            },
            "deliverableLink": Object {
              "value": "",
            },
            "deliverables": Object {
              "value": "Historical Illuminate courses matched with current equivalencies.",
            },
            "description": Object {
              "value": "-Audit all historical expeditions grades & match courses to equivalents",
            },
            "estimatedProjectSize": Object {
              "value": "1 - Extra Small",
            },
            "externalDueDate": Object {
              "value": "",
            },
            "id": Object {
              "value": 3,
            },
            "manager": Object {
              "value": "Bobby",
            },
            "mustDo": Object {
              "value": "Nice-to-Have",
            },
            "name": Object {
              "value": "Verify course equivalencies & Grad Requirements in Illuminate",
            },
            "notCompletedExplanation": Object {
              "value": "",
            },
            "notes": Object {
              "value": "",
            },
            "statusEndOfWeek1": Object {
              "value": "",
            },
            "statusEndOfWeek2": Object {
              "value": "",
            },
            "statusEndOfWeek3": Object {
              "value": "",
            },
            "statusEndOfWeek4": Object {
              "value": "",
            },
            "statusEndOfWeek5": Object {
              "value": "",
            },
            "statusEndOfWeek6": Object {
              "value": "",
            },
            "statusEndOfWeek7": Object {
              "value": "",
            },
            "statusEndOfWeek8": Object {
              "value": "",
            },
          },
        ],
        "startDate": "2120-01-24T00:00:00.000Z",
      },
      Object {
        "endDate": "2120-03-06T00:00:00.000Z",
        "id": "test_sprintId2",
        "name": "Sprint #2",
        "owner": "Mike",
        "participants": "Mike, Bobby",
        "projects": Array [],
        "startDate": "2120-02-10T00:00:00.000Z",
      },
      Object {
        "endDate": "2120-03-30T00:00:00.000Z",
        "id": "test_sprintId3",
        "name": "Sprint #3",
        "owner": "Mike",
        "participants": "Mike, Bobby",
        "projects": Array [],
        "startDate": "2120-03-09T00:00:00.000Z",
      },
      Object {
        "endDate": "2120-05-06T00:00:00.000Z",
        "id": "test_sprintId4",
        "name": "Sprint #4",
        "owner": "Mike",
        "participants": "Mike, Bobby",
        "projects": Array [],
        "startDate": "2120-04-01T00:00:00.000Z",
      },
    ]
  }
>
  <div>
    <div>
      <div>
        <WithStyles(ForwardRef(Button))
          color="primary"
          onClick={[Function]}
          variant="contained"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            color="primary"
            onClick={[Function]}
            variant="contained"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    CURRENT SPRINT
                  </span>
                  <NoSsr>
                    <WithStyles(undefined)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(undefined)>
                  </NoSsr>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </div>
      <div>
        No current sprint.
      </div>
    </div>
    <div>
      <div>
        <WithStyles(ForwardRef(Button))
          color="secondary"
          onClick={[Function]}
          variant="contained"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            color="secondary"
            onClick={[Function]}
            variant="contained"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-contained MuiButton-containedSecondary"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedSecondary"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    NEXT SPRINT
                  </span>
                  <NoSsr>
                    <WithStyles(undefined)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(undefined)>
                  </NoSsr>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </div>
    </div>
    <div>
      <div>
        <WithStyles(ForwardRef(Button))
          color="default"
          onClick={[Function]}
          variant="contained"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            color="default"
            onClick={[Function]}
            variant="contained"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-contained"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-contained"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-contained"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    PROJECT QUEUE
                  </span>
                  <NoSsr>
                    <WithStyles(undefined)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(undefined)>
                  </NoSsr>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </div>
    </div>
    <div>
      <div>
        <WithStyles(ForwardRef(Button))
          color="default"
          onClick={[Function]}
          variant="contained"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            color="default"
            onClick={[Function]}
            variant="contained"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-contained"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-contained"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-contained"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    FUTURE SPRINTS
                  </span>
                  <NoSsr>
                    <WithStyles(undefined)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(undefined)>
                  </NoSsr>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </div>
    </div>
    <div>
      <div>
        <WithStyles(ForwardRef(Button))
          color="default"
          onClick={[Function]}
          startIcon={<UNDEFINED />}
          variant="text"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            color="default"
            onClick={[Function]}
            startIcon={<UNDEFINED />}
            variant="text"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-text"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-text"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-text"
                  disabled={false}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    <span
                      className="MuiButton-startIcon MuiButton-iconSizeMedium"
                    >
                      <ForwardRef>
                        <WithStyles(ForwardRef(SvgIcon))>
                          <ForwardRef(SvgIcon)
                            classes={
                              Object {
                                "colorAction": "MuiSvgIcon-colorAction",
                                "colorDisabled": "MuiSvgIcon-colorDisabled",
                                "colorError": "MuiSvgIcon-colorError",
                                "colorPrimary": "MuiSvgIcon-colorPrimary",
                                "colorSecondary": "MuiSvgIcon-colorSecondary",
                                "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                "root": "MuiSvgIcon-root",
                              }
                            }
                          >
                            <svg
                              aria-hidden="true"
                              className="MuiSvgIcon-root"
                              focusable="false"
                              role="presentation"
                              viewBox="0 0 24 24"
                            >
                              <path
                                d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
                              />
                            </svg>
                          </ForwardRef(SvgIcon)>
                        </WithStyles(ForwardRef(SvgIcon))>
                      </ForwardRef>
                    </span>
                    CREATE NEW SPRINT
                  </span>
                  <NoSsr>
                    <WithStyles(undefined)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(undefined)>
                  </NoSsr>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </div>
    </div>
  </div>
</MainView>
`;
